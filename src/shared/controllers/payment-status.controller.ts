import {
  Controller,
  Get,
  Param,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';
import { Public } from '../decorators/public.decorator';
import { PaymentInfoDto } from '../dto/payment-info.dto';
import { PaymentService } from '../../subscription/services/payment.service';
import { OrderPaymentService } from '../../order/services/order-payment.service';

@ApiTags('Payment Status')
@Controller('payment-status')
@Public()
export class PaymentStatusController {
  constructor(
    private readonly subscriptionPaymentService: PaymentService,
    private readonly orderPaymentService: OrderPaymentService,
  ) {}

  @Get(':paymentId')
  @ApiOperation({
    summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID',
    description:
      '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞',
  })
  @ApiParam({
    name: 'paymentId',
    description: 'ID –ø–ª–∞—Ç–µ–∂–∞',
    example: '34f5753f-e8d8-4adf-b7dd-f319054de6fc',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–π–¥–µ–Ω',
    type: PaymentInfoDto,
  })
  @ApiResponse({
    status: 404,
    description: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω',
  })
  @ApiResponse({
    status: 400,
    description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–ª–∞—Ç–µ–∂–∞',
  })
  async getPaymentStatus(
    @Param('paymentId') paymentId: string,
  ): Promise<PaymentInfoDto> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è UUID
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(paymentId)) {
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–ª–∞—Ç–µ–∂–∞');
    }

    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}`);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
      const subscriptionPayment =
        await this.subscriptionPaymentService.getPayment(paymentId);
      console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö:`, subscriptionPayment);

      if (subscriptionPayment) {
        console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö`);
        return {
          id: subscriptionPayment.id,
          subscriptionId: subscriptionPayment.subscriptionId,
          amount: subscriptionPayment.amount,
          status: subscriptionPayment.status,
          createdAt: subscriptionPayment.createdAt,
          updatedAt: subscriptionPayment.updatedAt,
          paidAt: subscriptionPayment.paidAt,
        };
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–∫–∞–∑–∞—Ö
      const orderPayment = await this.orderPaymentService.getPayment(paymentId);
      console.log(`üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–∞–∑–∞—Ö:`, orderPayment);

      if (orderPayment) {
        console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–∞—Ö`);
        return {
          id: orderPayment.id,
          orderId: orderPayment.orderId,
          amount: orderPayment.amount,
          status: orderPayment.status,
          createdAt: orderPayment.createdAt,
          updatedAt: orderPayment.updatedAt,
          paidAt: orderPayment.paidAt,
        };
      }

      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö, –Ω–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö
      console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö, –Ω–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö`);
      throw new NotFoundException('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      if (
        error instanceof NotFoundException ||
        error instanceof BadRequestException
      ) {
        throw error;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
      console.error('Error checking payment status:', error);
      throw new NotFoundException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  @Get(':paymentId/type')
  @ApiOperation({
    summary: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID',
    description:
      '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ (subscription –∏–ª–∏ order) –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞',
  })
  @ApiParam({
    name: 'paymentId',
    description: 'ID –ø–ª–∞—Ç–µ–∂–∞',
    example: '34f5753f-e8d8-4adf-b7dd-f319054de6fc',
  })
  @ApiResponse({
    status: 200,
    description: '–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
    schema: {
      type: 'object',
      properties: {
        paymentId: { type: 'string' },
        type: { type: 'string', enum: ['subscription', 'order'] },
        exists: { type: 'boolean' },
      },
    },
  })
  @ApiResponse({
    status: 404,
    description: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω',
  })
  async getPaymentType(@Param('paymentId') paymentId: string) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è UUID
    const uuidRegex =
      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(paymentId)) {
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–ª–∞—Ç–µ–∂–∞');
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
      const subscriptionPayment =
        await this.subscriptionPaymentService.getPayment(paymentId);
      if (subscriptionPayment) {
        return {
          paymentId,
          type: 'subscription',
          exists: true,
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–∫–∞–∑–∞—Ö
      const orderPayment = await this.orderPaymentService.getPayment(paymentId);
      if (orderPayment) {
        return {
          paymentId,
          type: 'order',
          exists: true,
        };
      }

      return {
        paymentId,
        type: null,
        exists: false,
      };
    } catch (error) {
      console.error('Error checking payment type:', error);
      throw new NotFoundException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
  }

  @Get('debug/all')
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏',
  })
  async getAllPayments() {
    const subscriptionPayments =
      await this.subscriptionPaymentService.getAllPaymentIds();
    const orderPayments = await this.orderPaymentService.getAllPayments();

    return {
      subscriptionPayments: subscriptionPayments,
      orderPayments: orderPayments.map((p) => p.id),
      total: subscriptionPayments.length + orderPayments.length,
    };
  }
}
